doctype html
html(lang="en")
    include includes/head.pug
    body

        //- Page Content
        div.stackView.contentSection
            div.sectionHeader
                div.leftSectionHeaderButtonContainer
                    if directlyUnderRoot
                     a.sectionHeaderButton(href="/home") home
                    else
                     a.sectionHeaderButton(href="/home") home
                     a.sectionHeaderButton(href="/home?id=" + parentFolder) up
                div.rightSectionHeaderButtonContainer
                    if flashcard
                     a.sectionHeaderButton(href="/editStack") edit stack
                     a.sectionHeaderButton(href="/edit?id=" + flashcard.flashcardID) edit card
                     a.sectionHeaderButton(href="/edit?parentID=" + flashcardParent) new card


            div.flashcard
                if flashcard
                    div.flashcardContents(id="flashcardContents")
                        div.front(id="front")
                        //p.backPlaceholder(id="backPlaceholder", style="display:block")
                        div.back
                            div(id="back")

                    form(method="POST")
                        //input(type="text", name="answer", placeholder="answer")
                        p
                        input(name="answeredFlashcard", type="hidden", value= flashcard)
                        div.difficultyButtonsContainer
                            input.difficultyButton(name="difficulty", type="submit", value="Incorrect")
                            input.difficultyButton(name="difficulty", type="submit", value="Hard")
                            input.difficultyButton(name="difficulty", type="submit", value="Medium")
                            input.difficultyButton(name="difficulty", type="submit", value="Easy")


                    div(class="container")
                        if errors
                            p
                                each val in errors
                                    p=val


        script(src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest")
        script(src="https://cdn.jsdelivr.net/npm/@editorjs/header@2.7.0/dist/bundle.min.js")
        script(src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest")
        script(src="https://cdn.jsdelivr.net/npm/@editorjs/quote@latest")


        script.
            // "saves" flashcard that was just answered so the database can be adjusted

            const frontData = !{flashcard.front}
            console.log(frontData)
            const backData = !{flashcard.back}
            console.log(backData)
            document.getElementById("flashcardContents").addEventListener("click", () => {
               if (document.getElementById("back").style.display === "block") {
                   document.getElementById("back").style.display = "none"
                   document.getElementById("backPlaceholder").style.display= "block"
               } else {
                   document.getElementById("back").style.display = "block"
                   document.getElementById("backPlaceholder").style.display = "none"
               }
            })

            const frontEditor = new EditorJS({
                holder: "front",

                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: true,
                    },
                    list: {
                        class: List,
                        inlineToolbar: true,
                        config: {
                            defaultStyle: "unordered"
                        }
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: true,
                        config: {
                            quotePlaceholder: "quote",
                            captionPlaceholder: "author",
                        },
                    },
                },

                readOnly: true,
                data: frontData
            })

            const backEditor = new EditorJS({
                holder: "back",

                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: true,
                    },
                    list: {
                        class: List,
                        inlineToolbar: true,
                        config: {
                            defaultStyle: "unordered"
                        }
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: true,
                        config: {
                            quotePlaceholder: "quote",
                            captionPlaceholder: "author",
                        },
                    },
                },

                readOnly: true,
                data: backData


            })








        script(src="vendor/jquery/jquery.min.js")
        script(src="vendor/bootstrap/js/bootstrap.bundle.min.js")