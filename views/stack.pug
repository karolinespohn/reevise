doctype html
html(lang="en")
    include includes/head.pug
    body

        //- Page Content
        div.stackView.contentSection
            div.sectionHeader
                div.leftSectionHeaderButtonContainer
                    a.sectionHeaderButton(id="home", href="/home") home
                    if(directlyUnderRoot === "false")
                        a.sectionHeaderButton(id="up", href="/home?id=" + parentFolder) up
                div.rightSectionHeaderButtonContainer
                    if stackNotEmpty
                        //a.sectionHeaderButton(href="/editStack") edit stack
                        a.sectionHeaderButton(href="/edit?id=" + flashcard.flashcardID) edit card
                        a.sectionHeaderButton(id="newCardButton", href="/edit?parentID=" + flashcardParent) new card
                    else
                        a.sectionHeaderButton(href="/edit?parentID=" + flashcardParent) new card




            div.flashcard
                if stackNotEmpty
                    div.flashcardContents(id="flashcardContents")
                        div.front(id="front")
                        div.back
                            div(id="back")

                    form(id="difficultyForm", method="POST")
                        //input(type="text", name="answer", placeholder="answer")
                        p
                        input(name="answeredFlashcard", type="hidden", value= flashcard)
                        div.difficultyButtonsContainer
                            input.difficultyButton(id="incorrect", name="difficulty", type="submit", value="Incorrect")
                            input.difficultyButton(id="hard", name="difficulty", type="submit", value="Hard")
                            input.difficultyButton(id="medium", name="difficulty", type="submit", value="Medium")
                            input.difficultyButton(id="easy", name="difficulty", type="submit", value="Easy")


                    div(class="container")
                        if errors
                            p
                                each val in errors
                                    p=val


        script(src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest")
        script(src="https://cdn.jsdelivr.net/npm/@editorjs/header@2.7.0/dist/bundle.min.js")
        script(src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest")
        script(src="https://cdn.jsdelivr.net/npm/@editorjs/quote@latest")


        script(src="/javascripts/editorjs-latex.bundle.js")
        link(rel="stylesheet" href="https://cdn.jsdelivr.net/gh/mdgaziur/EditorJS-LaTeX@latest/dist/editorjs-latex.bundle.min.css")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.12.0/katex.min.js")
        link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.12.0/katex.min.css")

        script.
            function turnAroundBack() {
                if (document.getElementById("back").style.display === "block") {
                    document.getElementById("back").style.display = "none"
                } else {
                    document.getElementById("back").style.display = "block"
                }
            }

            const frontData = !{flashcard.front}
            const backData = !{flashcard.back}

            // initial display style of back is none, and can be changed through clicking or pressing enter

            document.getElementById("back").style.display = "none"

            document.getElementById("flashcardContents").addEventListener("click", () => {
                turnAroundBack()
            })

            document.addEventListener("keydown", (e) => {
                if (e.key === "Enter" || e.key === " " || e.key === "0") turnAroundBack()
                if (e.key === "a") document.getElementById("newCardButton").click()
            })


            // change flashcard using shortcuts 1/a, 2/s, 3/d, 4/f
            document.addEventListener("keydown", (e) => {
                switch (e.key) {
                    case "1":
                    case "a":
                        document.getElementById("incorrect").click()
                        break
                    case "2":
                    case "s":
                        document.getElementById("hard").click()
                        break
                    case "3":
                    case "d":
                        document.getElementById("medium").click()
                        break
                    case "4":
                    case "f":
                        document.getElementById("easy").click()
                        break
                    default:
                        break
                }
            })

            const frontEditor = new EditorJS({
                holder: "front",

                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: true,
                    },
                    list: {
                        class: List,
                        inlineToolbar: true,
                        config: {
                            defaultStyle: "unordered"
                        }
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: true,
                        config: {
                            quotePlaceholder: "quote",
                            captionPlaceholder: "author",
                        },
                    },
                    Math: {
                        class: EJLaTeX,
                        shortcut: 'CMD+SHIFT+M'
                    },
                },

                readOnly: true,
                data: frontData
            })

            const backEditor = new EditorJS({
                holder: "back",

                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: true,
                    },
                    list: {
                        class: List,
                        inlineToolbar: true,
                        config: {
                            defaultStyle: "unordered"
                        }
                    },
                    quote: {
                        class: Quote,
                        inlineToolbar: true,
                        config: {
                            quotePlaceholder: "quote",
                            captionPlaceholder: "author",
                        },
                    },
                    Math: {
                        class: EJLaTeX,
                        shortcut: 'CMD+SHIFT+M'
                    },
                },

                readOnly: true,
                data: backData


            })








        script(src="vendor/jquery/jquery.min.js")
        script(src="vendor/bootstrap/js/bootstrap.bundle.min.js")